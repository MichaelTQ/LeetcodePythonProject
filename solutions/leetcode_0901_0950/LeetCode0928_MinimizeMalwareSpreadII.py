import collections


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        if not graph: return -1
        n = len(graph)
        clean = set(range(n)) - set(initial)
        parents = list(range(n))
        size = [1]*n

        def find(x):
            if parents[x] != x:
                parents[x] = find(parents[x])
            return parents[x]

        def union(x, y):
            rx, ry = find(x), find(y)
            if rx != ry:
                if size[rx] < size[ry]:
                    parents[rx] = ry
                    size[ry] += size[rx]
                else:
                    parents[ry] = rx
                    size[rx] += size[ry]

        for i in range(n):
            for j in range(i):
                if i in clean and j in clean and graph[i][j]:
                    union(i, j)

        d = collections.defaultdict(set)
        infectedTimes = collections.Counter()
        for u in initial:
            for v in clean:
                if graph[u][v]:
                    d[u].add(find(v))
            for comm in d[u]:
                infectedTimes[comm] += 1

        count = [0]*n
        for u, comms in d.items():
            for comm in comms:
                if infectedTimes[comm] == 1:
                    count[u] += size[comm]

        maxi = max(count)
        return count.index(maxi) if maxi != 0 else min(initial)
